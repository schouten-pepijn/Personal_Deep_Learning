import pandas as pdimport matplotlib.pyplot as pltimport numpy as npimport tensorflow as tfimport tensorflow.keras as kerasfrom tensorflow.keras import layers, models#%% DATA IMPORTcsv_path = "/Users/pepijnschouten/Desktop/Deep Learning Projects/Tensorflow " \                "in action/chapter 4/CO2_time_series.csv"                                data = pd.read_csv(csv_path, sep=",")data = data.drop(columns=["Unknown", "Unknown2"])data = data.set_index("Date")print(data.head())plt.figure(figsize=(12, 6), dpi=100)plt.plot(data[["Average"]])plt.show()#%% DATA PREPROCESSINGdata["Average diff"] = data["Average"].diff(periods=1).fillna(0.)fig, axs = plt.subplots(2, 1, tight_layout=True, dpi=100)axs[0].plot(data["Average diff"])axs[1].hist(data["Average diff"], bins=20)plt.show()# Create input sequences and labelsdef generate_sequences(data_array, n_seq):    x, y = [], []    for i in range(data_array.shape[0]-n_seq):        x.append(data_array[i:i+n_seq-1])        y.append(data_array[i+n_seq-1:i+n_seq])    x, y = np.array(x).reshape(-1, n_seq-1, 1), np.array(y)    return x, y#%% CREATE THE MODELrnn = models.Sequential([    layers.SimpleRNN(64),    layers.Dense(64, activation='relu'),    layers.Dense(1)    ])criterion = keras.losses.MeanSquaredError()optimizer = keras.optimizers.Adam()rnn.compile(loss=criterion, optimizer=optimizer)#%% TRAIN THE MODELx, y = generate_sequences(data["Average diff"], n_seq=13)history = rnn.fit(x, y, shuffle=True, batch_size=64, epochs=25)plt.figure(dpi=100)plt.plot(history.history["loss"])plt.show()#%% MAKE PREDICTIONShistory = data["Average diff"].values[-12:].reshape(1, -1, 1)true_vals = []prev_true = data["Average"].values[-1]for i in range(60):    p_diff = rnn.predict(history).reshape(1, -1, 1)    history = np.concatenate((history[:, 1:, :], p_diff), axis=1)    true_vals.append(prev_true + p_diff[0, 0, 0])    prev_true = true_vals[-1]#%%df_previous = data["Average"]df_full = df_previous._append(pd.Series(true_vals, name="Average"))x_axis = np.arange(0, len(df_full))plt.figure()plt.plot(x_axis[:-60], df_full[:-60])plt.plot(x_axis[-60:], df_full[-60:])plt.show()